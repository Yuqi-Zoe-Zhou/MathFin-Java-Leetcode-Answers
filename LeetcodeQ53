class Solution {
    private int[] arrayOfNums;
    
    public int maxSubArray(int[] nums) {
        arrayOfNums = nums;
        return findMaxSubarraySum(0, arrayOfNums.length - 1);
        
    }
    
    private int findMaxSubarraySum(int left, int right) {
        if (left > right) {
            return Integer.MIN_VALUE;
        }
        
        int midIndex = Math.floorDiv(left + right, 2);
        int currentSum = 0;
        int bestLeftSum = 0;
        int bestRightSum = 0;
        
        for(int i = midIndex - 1; i >= left; i--) {
            currentSum = currentSum + arrayOfNums[i];
            bestLeftSum = Math.max(bestLeftSum, currentSum);
        }
        
        currentSum = 0;
        for(int j = midIndex + 1; j <= right; j++) {
            currentSum = currentSum + arrayOfNums[j];
            bestRightSum = Math.max(bestRightSum, currentSum);
        }
        
        int maxCombinedSum = arrayOfNums[midIndex] + bestLeftSum + bestRightSum;
        int maxLeftHalfSum = findMaxSubarraySum(left, midIndex -1);
        int maxRightHalfSum = findMaxSubarraySum(midIndex + 1, right);
        
        return Math.max(maxCombinedSum, Math.max(maxLeftHalfSum, maxRightHalfSum));
    }
}
